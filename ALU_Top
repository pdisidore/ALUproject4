/* Alu_Top.v
Author: Phillip Disidore
*/
`timescale 100 ns / 1 ns 

module Alu_Top(clk50, ar, a, b, mode, sign, sign_a, sign_b, disp_int_tens,disp_int_ones, disp_a, disp_b,
	VGA_R, VGA_G, VGA_B, VGA_HS, VGA_VS, VGA_BLANK, VGA_SYNC, VGA_CLK);
	
	input clk50, ar;
	input signed [3:0]a;
	input signed [3:0]b;
	input [1:0]mode;
	
	output sign,sign_a, sign_b;
	output [6:0] disp_int_tens,disp_int_ones,disp_a, disp_b;
	
	output [7:0] VGA_R, VGA_G, VGA_B; // Red, green, and blue outputs
  	output VGA_HS;   // Output horizontal synch
 	output VGA_VS;   // Output vertical synch
	output VGA_BLANK, VGA_SYNC;
	output VGA_CLK;
	
	//input clk50, ar;
	//input signed [3:0]a;
	//input signed [3:0]b;
	//input [1:0]mode;
	//output sign,sign_a, sign_b;
	//output [6:0] disp_int_tens,disp_int_ones,disp_a, disp_b;
	
	reg signed [7:0] a_ext, b_ext;
	reg signed [7:0] mult_out;
	wire signed [7:0] add, sub, product;
	
	assign add = a_ext + b_ext;
	assign sub = a_ext - b_ext;
	assign product = a_ext * b_ext;
	
	always @(negedge ar or posedge clk50)
		if(~ar)
			begin
			a_ext = 8'b0;
			b_ext = 8'b0;
			mult_out = 8'b0;  // 16?
			end
		else
			begin
			a_ext = a;
			b_ext = b;
			
			case(mode)
				2'b00: mult_out = add;
				2'b01: mult_out = sub;
				default: mult_out = product;
			endcase;
			end
	wire signed [7:0] out_2comp, out_2comp_a, out_2comp_b;
	wire [7:0] out_mag, out_mag_a, out_mag_b;
	reg [3:0]mag_ones, mag_tens;
	
	assign sign = mult_out[7];
	assign sign_a = a_ext[7];
	assign sign_b = b_ext[7];
	
	assign out_2comp = ~mult_out + 1'b1;
	assign out_2comp_a = ~a_ext + 1'b1;
	assign out_2comp_b = ~b_ext + 1'b1;
	
	assign out_mag = sign ? out_2comp : mult_out;
	assign out_mag_a = sign_a ? out_2comp_a : a_ext;
	assign out_mag_b = sign_b ? out_2comp_b : b_ext; 
	
	
	assign disp_a =
		(out_mag_a == 4'h0) ? 7'b1000000 :
		(out_mag_a == 4'h1) ? 7'b1111001 :
		(out_mag_a == 4'h2) ? 7'b0100100 :
		(out_mag_a == 4'h3) ? 7'b0110000 :
		(out_mag_a == 4'h4) ? 7'b0011001 :
		(out_mag_a == 4'h5) ? 7'b0010010 :
		(out_mag_a == 4'h6) ? 7'b0000010 :  
		(out_mag_a == 4'h7) ? 7'b1111000 :
		(out_mag_a == 4'h8) ? 7'b0000000 :
		(out_mag_a == 4'h9) ? 7'b0010000 :
		(out_mag_a == 4'ha) ? 7'b0001000 :
		(out_mag_a == 4'hb) ? 7'b0000011 :
		(out_mag_a == 4'hc) ? 7'b1000110 :
		(out_mag_a == 4'hd) ? 7'b0100001 :
		(out_mag_a == 4'he) ? 7'b0000110 :
						7'b0001110 ;
	
	assign disp_b =
		(out_mag_b == 4'h0) ? 7'b1000000 :
		(out_mag_b == 4'h1) ? 7'b1111001 :
		(out_mag_b == 4'h2) ? 7'b0100100 :
		(out_mag_b == 4'h3) ? 7'b0110000 :
		(out_mag_b == 4'h4) ? 7'b0011001 :
		(out_mag_b == 4'h5) ? 7'b0010010 :
		(out_mag_b == 4'h6) ? 7'b0000010 :  
		(out_mag_b == 4'h7) ? 7'b1111000 :
		(out_mag_b == 4'h8) ? 7'b0000000 :
		(out_mag_b == 4'h9) ? 7'b0010000 :
		(out_mag_b == 4'ha) ? 7'b0001000 :
		(out_mag_b == 4'hb) ? 7'b0000011 :
		(out_mag_b == 4'hc) ? 7'b1000110 :
		(out_mag_b == 4'hd) ? 7'b0100001 :
		(out_mag_b == 4'he) ? 7'b0000110 :
						7'b0001110 ;
	
	integer int;
	always@(out_mag)
		begin
		mag_tens = 4'd0;
		mag_ones = 4'd0;
		
		for (int=7; int >= 0; int=int-1)
		begin
			// add 3 to columns >= 5

			if(mag_tens >= 5)
				mag_tens = mag_tens + 3;
			if(mag_ones >= 5)
				mag_ones = mag_ones + 3;
				
			//shift left ones
			mag_tens = mag_tens << 1;
			mag_tens[0] = mag_ones[3];
			mag_ones = mag_ones << 1;
			mag_ones[0] = out_mag[int];
		end
	end
	assign disp_int_tens =
		(mag_tens == 4'h0) ? 7'b1000000 :
		(mag_tens == 4'h1) ? 7'b1111001 :
		(mag_tens == 4'h2) ? 7'b0100100 :
		(mag_tens == 4'h3) ? 7'b0110000 :
		(mag_tens == 4'h4) ? 7'b0011001 :
		(mag_tens == 4'h5) ? 7'b0010010 :
		(mag_tens == 4'h6) ? 7'b0000010 :  
		(mag_tens == 4'h7) ? 7'b1111000 :
		(mag_tens == 4'h8) ? 7'b0000000 :
		(mag_tens == 4'h9) ? 7'b0010000 :
		(mag_tens == 4'ha) ? 7'b0001000 :
		(mag_tens == 4'hb) ? 7'b0000011 :
		(mag_tens == 4'hc) ? 7'b1000110 :
		(mag_tens == 4'hd) ? 7'b0100001 :
		(mag_tens == 4'he) ? 7'b0000110 :
						7'b0001110 ;
	assign disp_int_ones =
		(mag_ones == 4'h0) ? 7'b1000000 :
		(mag_ones == 4'h1) ? 7'b1111001 :
		(mag_ones == 4'h2) ? 7'b0100100 :
		(mag_ones == 4'h3) ? 7'b0110000 :
		(mag_ones == 4'h4) ? 7'b0011001 :
		(mag_ones == 4'h5) ? 7'b0010010 :
		(mag_ones == 4'h6) ? 7'b0000010 :  
		(mag_ones == 4'h7) ? 7'b1111000 :
		(mag_ones == 4'h8) ? 7'b0000000 :
		(mag_ones == 4'h9) ? 7'b0010000 :
		(mag_ones == 4'ha) ? 7'b0001000 :
		(mag_ones == 4'hb) ? 7'b0000011 :
		(mag_ones == 4'hc) ? 7'b1000110 :
		(mag_ones == 4'hd) ? 7'b0100001 :
		(mag_ones == 4'he) ? 7'b0000110 :
						7'b0001110 ;
	
	
	vga_rom(.CLOCK_50(clk50), .ar(ar), .VGA_R(VGA_R), .VGA_G(VGA_G), .VGA_B(VGA_B),
		.VGA_HS(VGA_HS), .VGA_VS(VGA_VS), .VGA_BLANK(VGA_BLANK), .VGA_SYNC(VGA_SYNC), .VGA_CLK(VGA_CLK),
		.sa(sign_a), .A(out_mag_a), .mode(mode), .B(out_mag_b), .sb(sign_b), .ABsout(sign), .ABout(mag_tens), .ABout2(mag_ones));
		
endmodule
